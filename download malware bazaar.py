import requests
import os
import zipfile
import pyzipper

# Chiedi all'utente se vuole decomprimere i file scaricati
decompress_choice = input("Vuoi decomprimere i file ZIP scaricati? (s/n): ").strip().lower()
decompress = decompress_choice == "s"

# Imposta il tag e la cartella di output
tag = "TAG" #inserisci qui il tuo tag
output_dir = r"C:\Users\paperino\Desktop\samples" #inserisci qui il tuo percorso
os.makedirs(output_dir, exist_ok=True)

# URL dell'API di MalwareBazaar
url = "https://mb-api.abuse.ch/api/v1/"

# Richiedi la lista dei sample associati al tag
data = {
    "query": "get_taginfo",
    "tag": tag
}
response = requests.post(url, data=data)

try:
    samples = response.json().get("data", [])
except Exception as e:
    print(f"Errore nel recuperare la lista dei sample: {e}")
    print(f"Risposta API: {response.text}")
    exit(1)

# Scarica ogni file basandosi sull'hash SHA256
for sample in samples:
    sha256 = sample["sha256_hash"]
    print(f"Scaricando {sha256}...")

    download_data = {
        "query": "get_file",
        "sha256_hash": sha256
    }
    file_response = requests.post(url, data=download_data)

    if file_response.status_code == 200:
        # Se il file inizia con "PK", lo consideriamo un archivio ZIP
        if file_response.content[:2] == b'PK':
            file_path = os.path.join(output_dir, f"{sha256}.zip")
        else:
            file_path = os.path.join(output_dir, f"{sha256}.bin")

        # Salva il file scaricato
        with open(file_path, "wb") as f:
            f.write(file_response.content)
        print(f"File salvato: {file_path}")

        # Se richiesto, prova a decompattare il file ZIP protetto da password "infected"
        if decompress and file_path.endswith(".zip"):
            try:
                # Prima prova con zipfile
                with zipfile.ZipFile(file_path, "r") as zip_ref:
                    zip_ref.extractall(output_dir, pwd=b"infected")
                print(f"File {file_path} decompresso correttamente con zipfile.")
            except NotImplementedError as nie:
                print(f"zipfile non supporta il metodo di compressione per {file_path}: {nie}")
                # Prova con pyzipper
                try:
                    with pyzipper.AESZipFile(file_path, "r") as zf:
                        zf.pwd = b"infected"
                        zf.extractall(output_dir)
                    print(f"File {file_path} decompresso correttamente con pyzipper.")
                except Exception as e:
                    print(f"Errore durante la decompressione di {file_path} con pyzipper: {e}")
                    continue
            except Exception as e:
                print(f"Errore durante la decompressione di {file_path}: {e}")
                continue

            # Se la decompressione Ã¨ andata a buon fine, elimina l'archivio ZIP
            try:
                os.remove(file_path)
                print(f"File ZIP {file_path} cancellato.")
            except Exception as e:
                print(f"Errore nel cancellare {file_path}: {e}")
    else:
        print(f"Errore nel download di {sha256} (status code: {file_response.status_code})")

print("Download completato.")
